// mixin для Фона
@mixin bg($src, $media:xy, $path:xy) {
  @if $media==xy {
    @if $path==xy {
      background-image: url(#{$url}#{$path2}#{$src});
    }

    @else if $path==1 {
      background-image: url(#{$url}#{$path1}#{$src});
    }

    @else {
      background-image: url(#{$url}#{$path}/#{$src});
    }
  }

  @else {
    @include media-breakpoint-up($media) {
      background-image: url(#{$url}#{$path2}#{$src});
    }

    background-image: url(#{$url}#{$path1}#{$src});

  }
}

// обсалютное центрирование

@mixin a-cent($xy:xy) {
  @if $xy==xy {
    position: absolute;
    left: 50%;
    top: 50%;
    bottom: auto;
    right: auto;
    @include transform(translateX(-50%) translateY(-50%));
  }

  @else if $xy==x {
    position: absolute;
    left: 50%;
    right: auto;
    @include transform(translateX(-50%));
  }

  @else if $xy==y {
    position: absolute;
    top: 50%;
    bottom: auto;
    @include transform(translateY(-50%));
  }
}


@mixin roww($a, $m:p) {
  --bs-gutter-x: #{$a};

  margin-left: calc(-1 * var(--bs-gutter-x)/ 2);
  margin-right: calc(-1 * var(--bs-gutter-x)/ 2);

  >* {
    @if $m==m {
      margin-left: calc(var(--bs-gutter-x)/2);
      margin-right: calc(var(--bs-gutter-x)/2);
    }

    @else {

      padding-left: calc(var(--bs-gutter-x)/2);
      padding-right: calc(var(--bs-gutter-x)/2);
    }
  }
}

@mixin center($w) {
  margin-left: auto;
  margin-right: auto;
  max-width: #{$w}px;
}

// color в rgba
@mixin rgba($c, $a) {
  background-color: rgba($color:$c, $alpha: $a);
}

@mixin bgs($w: center, $h: center) {
  background-size: cover;
  background-repeat: no-repeat;
  background-position: $w $h;
}

@mixin img-bg($w: center, $h: center) {
  position: relative;
  background-size: cover;
  background-repeat: no-repeat;
  background-position: $w $h;

  img {
    position: absolute;
    // opacity: 0;
    width: 1px;
    height: 1px;
    margin: -1px;
    border: 0;
    padding: 0;
    clip: rect(0 0 0 0);
    overflow: hidden;
  }
}



@mixin bgsn($img, $w: center, $h: center) {
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center center;
  background-image: url($img);
}

@mixin mt($s: .36) {
  transition: all #{$s}s;
}

@mixin c-white {
  color: #fff;
}

@mixin c-dark {
  color: #000;
}


@mixin fontello($icon, $fz) {
  content: $icon;
  font-family: "fontello";
  font-style: normal;
  font-weight: normal;
  font-size: $fz;
}

@mixin awe($icon, $fz) {
  content: $icon;
  font-family: 'FontAwesome';
  font-style: normal;
  font-weight: normal;
  font-size: $fz;
}

@mixin fab($icon) {
  content: $icon;
  font-family: 'Font Awesome 5 Brands';
  font-style: normal;
  font-weight: normal;

}

@mixin far($icon) {
  content: $icon;
  font-family: 'Font Awesome 5 Pro';
  font-style: normal;
  font-weight: normal;

}

@mixin fas($icon) {
  content: $icon;
  font-family: 'Font Awesome 5 Pro';
  font-style: normal;
  // font-weight: normal;
  font-weight: 900;

}

@mixin fal($icon) {
  content: $icon;
  font-family: 'Font Awesome 5 Pro';
  font-style: normal;
  // font-weight: normal;
  font-weight: 300;

}



// михин многоточия
@mixin ellips {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
  // display: block;
  // display: inline-block;
}


@mixin input-placeholder {
  &.placeholder {
    @content;
  }
}

// масштвбирование блока пропорционально
@mixin block($w: 1, $h: 1) {
  display: block;
  position: relative;

  &::before {
    position: relative;
    content: '';
    position: relative;
    height: 0;
    display: block;
    padding-bottom: ($h/$w *100%);
  }
}

@mixin round($w) {
  display: -webkit-inline-flex;
  display: -ms-inline-flex;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  width: #{$w}px;
  height: #{$w}px;
}

// для анимации
@mixin keyfr($name) {

  @keyframes #{$name} {
    @content;
  }
}

// for BEM
@mixin elem($name) {
  @at-root #{&}__#{$name} {
    @content;
  }
}

@mixin mod($name) {
  @at-root #{&}-#{$name} {
    @content;
  }
}

// .block {
//   color: red;
//
//   @include element(element) {
//     color: green;
//
//     @include modifier(modifier) {
//       color: blue;
//     }
//   }
// }

@mixin padding($values...) {
  @each $var in $values {
    padding: #{$var};
  }
}
$variable-prefix: "bs-";
@mixin make-row($gutter: $grid-gutter-width) {
  --#{$variable-prefix}gutter-x: #{$gutter};
  --#{$variable-prefix}gutter-y: 0;
  display: flex;
  flex-wrap: wrap;
  // TODO: Revisit calc order after https://github.com/react-bootstrap/react-bootstrap/issues/6039 is fixed
  margin-top: calc(-1 * var(--#{$variable-prefix}gutter-y)); // stylelint-disable-line function-disallowed-list
  margin-right: calc(-.5 * var(--#{$variable-prefix}gutter-x)); // stylelint-disable-line function-disallowed-list
  margin-left: calc(-.5 * var(--#{$variable-prefix}gutter-x)); // stylelint-disable-line function-disallowed-list
}

@mixin make-col-ready1($gutter: $grid-gutter-width) {
  // Add box sizing if only the grid is loaded
  box-sizing: if(variable-exists(include-column-box-sizing) and $include-column-box-sizing, border-box, null);
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we set the width
  // later on to override this initial width.
  flex-shrink: 0;
  padding-right: calc(var(--#{$variable-prefix}gutter-x) * .5); // stylelint-disable-line function-disallowed-list
  padding-left: calc(var(--#{$variable-prefix}gutter-x) * .5); // stylelint-disable-line function-disallowed-list
  margin-top: var(--#{$variable-prefix}gutter-y);
}

@mixin make-col1() {
    flex: 1 1 0;
}


@mixin col-sw(){ 
  @include make-col1;
  @include make-col-ready1;
  // padding: 0 calc(var(--bs-gutter-x)/2) !important;
  // margin-top: var(--bs-gutter-y);
  margin-right: 0 !important;
}


@mixin row-sw($x: $grid-gutter-width, $media: lg, $y:$x) {
  @include media-breakpoint-up($media) {

    @include make-row;
    --bs-gutter-x: #{$x};
    --bs-gutter-y: #{$y};
    margin-top: calc(-1 * var(--bs-gutter-y)); 
    transform: none!important;
    width: calc(100% + var(--bs-gutter-x, 0px)) !important;
    max-width: calc(100% + var(--bs-gutter-x, 0px)) !important;
    height: auto;
    & > .swiper-slide-duplicate{
      display: none!important;
    }
    & > .swiper-slide{
      @include col-sw(); 
    }
  }
  & > .swiper-slide{
    height: auto;
  }
}